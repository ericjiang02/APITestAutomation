// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace APITestAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calculator")]
    public partial class CalculatorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Calculator.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Calculator", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculation between two whole numbers via API")]
        [NUnit.Framework.CategoryAttribute("CalculationTest")]
        [NUnit.Framework.TestCaseAttribute("0", "-", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0", "-", "1", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("0", "-", "999", "-999", null)]
        [NUnit.Framework.TestCaseAttribute("9999", "-", "999", "9000", null)]
        [NUnit.Framework.TestCaseAttribute("0", "+", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1", "+", "9", "10", null)]
        [NUnit.Framework.TestCaseAttribute("99", "+", "1", "100", null)]
        [NUnit.Framework.TestCaseAttribute("1", "+", "999", "1000", null)]
        [NUnit.Framework.TestCaseAttribute("999", "+", "999", "1998", null)]
        [NUnit.Framework.TestCaseAttribute("0", "*", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0", "*", "999", "0", null)]
        [NUnit.Framework.TestCaseAttribute("999", "*", "999", "998001", null)]
        [NUnit.Framework.TestCaseAttribute("1", "/", "1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("0", "/", "0", "Undefined", null)]
        [NUnit.Framework.TestCaseAttribute("0", "/", "1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1", "/", "0", "Undefined", null)]
        public virtual void CalculationBetweenTwoWholeNumbersViaAPI(string leftNumber, string @operator, string rightNumber, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CalculationTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("LeftNumber", leftNumber);
            argumentsOfScenario.Add("Operator", @operator);
            argumentsOfScenario.Add("RightNumber", rightNumber);
            argumentsOfScenario.Add("Result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculation between two whole numbers via API", null, tagsOfScenario, argumentsOfScenario);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "LeftNumber",
                            "Operator",
                            "RightNumber"});
                table1.AddRow(new string[] {
                            string.Format("{0}", leftNumber),
                            string.Format("{0}", @operator),
                            string.Format("{0}", rightNumber)});
#line 8
 testRunner.Given("I enter leftNumber, operator and rightNumber on the calculator", ((string)(null)), table1, "Given ");
#line hidden
#line 11
 testRunner.When("I press Calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then(string.Format("I should see result {0} returned", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.And("I should receive response code OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Negative field validation tests")]
        [NUnit.Framework.CategoryAttribute("NegativeTest")]
        [NUnit.Framework.TestCaseAttribute("1.1", "+", "2.2", "Undefined", null)]
        [NUnit.Framework.TestCaseAttribute("aaa", "-", "bbb", "Undefined", null)]
        [NUnit.Framework.TestCaseAttribute("@#$", "*", "(&^", "Undefined", null)]
        [NUnit.Framework.TestCaseAttribute("3", "&", "5", "Undefined", null)]
        [NUnit.Framework.TestCaseAttribute("-3", "+", "-7", "Undefined", null)]
        public virtual void NegativeFieldValidationTests(string leftNumber, string @operator, string rightNumber, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NegativeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("LeftNumber", leftNumber);
            argumentsOfScenario.Add("Operator", @operator);
            argumentsOfScenario.Add("RightNumber", rightNumber);
            argumentsOfScenario.Add("Result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative field validation tests", null, tagsOfScenario, argumentsOfScenario);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "LeftNumber",
                            "Operator",
                            "RightNumber"});
                table2.AddRow(new string[] {
                            string.Format("{0}", leftNumber),
                            string.Format("{0}", @operator),
                            string.Format("{0}", rightNumber)});
#line 36
 testRunner.Given("I enter leftNumber, operator and rightNumber on the calculator", ((string)(null)), table2, "Given ");
#line hidden
#line 39
 testRunner.When("I press Calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then(string.Format("I should see result {0} returned", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.And("I should receive response code OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
